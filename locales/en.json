{
  "common": {
    "language": "Language",
    "theme": "Theme",
    "light": "Light",
    "dark": "Dark",
    "home": "Home",
    "loading": "Loading...",
    "error": "Error",
    "success": "Success",
    "settings": "Settings"
  },
  "header": {
    "title": "Offline LeetCode Practice",
    "subtitle": "Local problem set, supports editing and running tests in browser (JavaScript)"
  },
  "homepage": {
    "title": "ðŸš€ Offline LeetCode Practice",
    "subtitle": "Local problem set, supports editing and running tests in browser (JavaScript)",
    "problemList": "ðŸ“š Problem List",
    "problems": "problems",
    "addProblem": "Add Problem",
    "search": "Search",
    "searchPlaceholder": "Search problem title or description...",
    "filterByDifficulty": "Filter by Difficulty",
    "filterByTags": "Filter by Tags",
    "allDifficulties": "All Difficulties",
    "allTags": "All Tags",
    "clearFilters": "Clear Filters",
    "noResults": "No matching problems found",
    "showingResults": "Showing",
    "of": "of",
    "aiGenerator": "AI Generator",
    "difficulty": {
      "Easy": "Easy",
      "Medium": "Medium",
      "Hard": "Hard"
    }
  },
  "problemPage": {
    "description": "Problem Description",
    "examples": "Examples",
    "solution": "Reference Solution",
    "solutions": "Reference Solutions",
    "example": "Example",
    "input": "Input",
    "output": "Output",
    "showSolution": "Show Solution",
    "hideSolution": "Hide Solution",
    "solutionHidden": "Click to view the reference solution",
    "solutionTitle": "Solution {{index}}: {{title}}",
    "noSolutions": "No reference solutions available for this problem."
  },
  "codeRunner": {
    "title": "ðŸ’» Code Editor",
    "submit": "ðŸš€ Submit & Run Tests",
    "running": "Running...",
    "testResults": "ðŸ“‹ Test Results",
    "passed": "Passed",
    "failed": "Failed",
    "testCase": "Test Case",
    "expected": "Expected Output",
    "actual": "Actual Output",
    "executionTime": "Execution Time",
    "ms": "ms",
    "runningTests": "Running tests...",
    "runError": "Runtime Error",
    "networkError": "Failed to run, please check network connection",
    "noResults": "No test results yet. Run your code to see results here.",
    "totalExecutionTime": "Total Execution Time",
    "averageTime": "Average Time",
    "memoryUsed": "Memory Used",
    "totalMemory": "Total Memory",
    "input": "Input",
    "copy": "Copy",
    "copied": "Copied!"
  },
  "tags": {
    "array": "Array",
    "hash-table": "Hash Table",
    "math": "Math",
    "string": "String",
    "stack": "Stack",
    "linked-list": "Linked List",
    "recursion": "Recursion",
    "two-pointers": "Two Pointers",
    "binary-search": "Binary Search",
    "divide-and-conquer": "Divide and Conquer",
    "dynamic-programming": "Dynamic Programming",
    "memoization": "Memoization"
  },
  "addProblem": {
    "title": "Add New Problem",
    "manualForm": "Manual Form",
    "importJson": "Import JSON",
    "uploadJsonFile": "Upload JSON File:",
    "selectJsonFile": "Select JSON file",
    "pasteJson": "Or paste JSON:",
    "importJsonButton": "Import JSON",
    "basicInformation": "Basic Information",
    "problemId": "Problem ID:",
    "problemIdHint": "Use lowercase letters, numbers, and hyphens only",
    "difficulty": "Difficulty:",
    "titles": "Titles",
    "englishTitle": "English Title:",
    "chineseTitle": "Chinese Title:",
    "tagsLabel": "Tags (comma-separated):",
    "tagsPlaceholder": "e.g., array, hash-table",
    "descriptions": "Descriptions",
    "englishDescription": "English Description:",
    "chineseDescription": "Chinese Description:",
    "testCases": "Test Cases:",
    "input": "Input:",
    "expectedOutput": "Expected Output:",
    "removeTestCase": "Remove Test Case",
    "addTestCase": "Add Test Case",
    "addProblemButton": "Add Problem",
    "addingProblem": "Adding Problem...",
    "problemAddedSuccess": "Problem added successfully! ID: {{id}}",
    "invalidJsonFormat": "Invalid JSON format",
    "jsonImportedSuccess": "JSON imported successfully",
    "networkError": "Network error occurred",
    "backToProblems": "Back to Problems"
  },
  "aiGenerator": {
    "title": "AI Problem Generator",
    "subtitle": "Describe the type of coding problem you want to practice. The AI will generate a custom LeetCode-style problem for you.",
    "backToHome": "Back to Home",
    "tryLastProblem": "Try Last Problem",
    "requestLabel": "Describe your problem request",
    "requestPlaceholder": "e.g., I want to do a dynamic programming problem, or I want to do a string processing problem",
    "suggestedRequests": "Suggested Requests",
    "generateButton": "Generate Problem",
    "generating": "Generating...",
    "cancel": "Cancel",
    "errorTitle": "Error",
    "successTitle": "Success",
    "previewTitle": "Generated Problem Preview",
    "problemId": "Problem ID",
    "howToUse": "How to use",
    "instruction1": "Describe the type of problem you want (algorithm type, difficulty, topic)",
    "instruction2": "You can write in English or Chinese",
    "instruction3": "Be specific about what you want to practice (e.g., \"dynamic programming\", \"graph algorithms\")",
    "instruction4": "The AI will generate a complete problem with test cases and solutions",
    "instruction5": "The generated problem will be automatically added to your problem collection",
    "pleaseEnterRequest": "Please enter a problem request",
    "poweredBy": "Powered by {{provider}}",
    "unlimitedProblems": "Generate unlimited coding problems",
    "usingOnlineAI": "Using Online AI ({{provider}})",
    "usingLocalAI": "Using Local AI (Ollama)",
    "selectAIProvider": "Select AI Provider",
    "autoSelect": "Auto",
    "onlineAI": "Online (DeepSeek)",
    "localAI": "Local (Ollama)",
    "deepseek": "DeepSeek",
    "openai": "OpenAI",
    "qwen": "Qwen",
    "claude": "Claude",
    "noAIProviderConfigured": "No AI provider is configured. Please configure one of the supported AI providers in your environment variables.",
    "jsonParseError": "Failed to parse the generated JSON. You can fix it in the editor below.",
    "fixJsonTitle": "Fix Generated JSON",
    "fixJsonInstructions": "The AI generated content that couldn't be parsed as valid JSON. Please fix any syntax errors and save the corrected JSON.",
    "saveFixedJson": "Save Fixed JSON",
    "pleaseEnterJson": "Please enter JSON content",
    "invalidJsonFormat": "Invalid JSON format. Please check for syntax errors."
  },
  "settings": {
    "title": "Settings",
    "description": "Configure AI model providers for problem generation",
    "save": "Save Configuration",
    "saving": "Saving...",
    "deepseek": {
      "apiKey": "API Key",
      "apiKeyPlaceholder": "Enter your DeepSeek API key",
      "model": "Model",
      "modelPlaceholder": "Enter model name (e.g., deepseek-chat)",
      "timeout": "API Timeout (ms)",
      "timeoutPlaceholder": "Enter timeout in milliseconds",
      "maxTokens": "Max Tokens",
      "maxTokensPlaceholder": "Enter maximum tokens for generation"
    },
    "openai": {
      "apiKey": "API Key",
      "apiKeyPlaceholder": "Enter your OpenAI API key",
      "model": "Model",
      "modelPlaceholder": "Enter model name (e.g., gpt-4-turbo)"
    },
    "qwen": {
      "apiKey": "API Key",
      "apiKeyPlaceholder": "Enter your Qwen API key",
      "model": "Model",
      "modelPlaceholder": "Enter model name (e.g., qwen-turbo)"
    },
    "claude": {
      "apiKey": "API Key",
      "apiKeyPlaceholder": "Enter your Claude API key",
      "model": "Model",
      "modelPlaceholder": "Enter model name (e.g., claude-3-haiku-20240307)"
    },
    "ollama": {
      "endpoint": "Endpoint",
      "endpointPlaceholder": "Enter Ollama endpoint (e.g., http://localhost:11434)",
      "model": "Model",
      "modelPlaceholder": "Enter model name (e.g., llama3)"
    }
  }
}