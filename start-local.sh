#!/bin/bash

# Offline LeetCode Practice System - Local Startup Script
# ======================================================

echo "Offline LeetCode Practice System - Local Startup"
echo "==================================================="
echo ""

# Support a non-interactive mode for automation/CI
# Usage: ./start-local.sh --yes  OR  START_LOCAL_NONINTERACTIVE=1 ./start-local.sh
NONINTERACTIVE=0
if [ "$1" = "--yes" ] || [ "$1" = "-y" ] || [ "$START_LOCAL_NONINTERACTIVE" = "1" ]; then
    NONINTERACTIVE=1
fi

# First-run check: interactive AI configuration for .env (or copy from .env.example in non-interactive)
if [ ! -f ".env" ]; then
    if [ "$NONINTERACTIVE" -eq 1 ]; then
        echo "No .env file found — non-interactive mode enabled."
        if [ -f ".env.example" ]; then
            cp .env.example .env
            echo ".env created from .env.example (non-interactive). Edit .env to change settings."
        else
            echo "No .env.example found — creating minimal .env with defaults and empty keys."
            echo "# Generated by start-local.sh (non-interactive)" > .env
            echo "# AI provider configuration" >> .env
            echo "OPENAI_MODEL=gpt-4-turbo" >> .env
            echo "OPENAI_API_KEY=" >> .env
            echo "DEEPSEEK_MODEL=deepseek-chat" >> .env
            echo "DEEPSEEK_API_KEY=" >> .env
            echo "QWEN_MODEL=qwen-turbo" >> .env
            echo "QWEN_API_KEY=" >> .env
            echo "CLAUDE_MODEL=claude-3-haiku-20240307" >> .env
            echo "CLAUDE_API_KEY=" >> .env
            echo "OLLAMA_ENDPOINT=http://localhost:11434" >> .env
            echo "OLLAMA_MODEL=llama3" >> .env
            echo "# Note: To change AI configuration later, edit the .env file." >> .env
        fi
    else
        echo "No .env file found — first time startup."
        read -p "Would you like to enable AI features? [Y/n]: " enable_ai
        enable_ai=${enable_ai:-Y}
        enable_ai=$(echo "$enable_ai" | tr '[:upper:]' '[:lower:]')

        if [ "$enable_ai" = "y" ] || [ "$enable_ai" = "yes" ] || [ "$enable_ai" = "" ]; then
            echo "Creating .env and configuring AI providers..."
            echo "# Generated by start-local.sh" > .env
            echo "# AI provider configuration" >> .env

            # OpenAI
            read -p "Enable OpenAI? [Y/n]: " use_openai
            use_openai=${use_openai:-Y}
            use_openai=$(echo "$use_openai" | tr '[:upper:]' '[:lower:]')
            if [ "$use_openai" = "y" ] || [ "$use_openai" = "yes" ] || [ "$use_openai" = "" ]; then
                read -p "OpenAI model (default: gpt-4-turbo): " openai_model
                openai_model=${openai_model:-gpt-4-turbo}
                read -p "OpenAI API key (paste and press Enter): " openai_key
                echo "OPENAI_MODEL=$openai_model" >> .env
                echo "OPENAI_API_KEY=$openai_key" >> .env
            else
                echo "OPENAI_API_KEY=" >> .env
            fi

            # DeepSeek
            read -p "Enable DeepSeek? [y/N]: " use_deepseek
            use_deepseek=${use_deepseek:-N}
            use_deepseek=$(echo "$use_deepseek" | tr '[:upper:]' '[:lower:]')
            if [ "$use_deepseek" = "y" ] || [ "$use_deepseek" = "yes" ]; then
                read -p "DeepSeek model (default: deepseek-chat): " deepseek_model
                deepseek_model=${deepseek_model:-deepseek-chat}
                read -p "DeepSeek API key (paste and press Enter): " deepseek_key
                echo "DEEPSEEK_MODEL=$deepseek_model" >> .env
                echo "DEEPSEEK_API_KEY=$deepseek_key" >> .env
            else
                echo "DEEPSEEK_API_KEY=" >> .env
            fi

            # Qwen
            read -p "Enable Qwen? [y/N]: " use_qwen
            use_qwen=${use_qwen:-N}
            use_qwen=$(echo "$use_qwen" | tr '[:upper:]' '[:lower:]')
            if [ "$use_qwen" = "y" ] || [ "$use_qwen" = "yes" ]; then
                read -p "Qwen model (default: qwen-turbo): " qwen_model
                qwen_model=${qwen_model:-qwen-turbo}
                read -p "Qwen API key (paste and press Enter): " qwen_key
                echo "QWEN_MODEL=$qwen_model" >> .env
                echo "QWEN_API_KEY=$qwen_key" >> .env
            else
                echo "QWEN_API_KEY=" >> .env
            fi

            # Claude
            read -p "Enable Claude (Anthropic)? [y/N]: " use_claude
            use_claude=${use_claude:-N}
            use_claude=$(echo "$use_claude" | tr '[:upper:]' '[:lower:]')
            if [ "$use_claude" = "y" ] || [ "$use_claude" = "yes" ]; then
                read -p "Claude model (default: claude-3-haiku-20240307): " claude_model
                claude_model=${claude_model:-claude-3-haiku-20240307}
                read -p "Claude API key (paste and press Enter): " claude_key
                echo "CLAUDE_MODEL=$claude_model" >> .env
                echo "CLAUDE_API_KEY=$claude_key" >> .env
            else
                echo "CLAUDE_API_KEY=" >> .env
            fi

            # Ollama (endpoint + model)
            read -p "Enable Ollama? [y/N]: " use_ollama
            use_ollama=${use_ollama:-N}
            use_ollama=$(echo "$use_ollama" | tr '[:upper:]' '[:lower:]')
            if [ "$use_ollama" = "y" ] || [ "$use_ollama" = "yes" ]; then
                read -p "Ollama endpoint (default: http://localhost:11434): " ollama_endpoint
                ollama_endpoint=${ollama_endpoint:-http://localhost:11434}
                read -p "Ollama model (default: llama3): " ollama_model
                ollama_model=${ollama_model:-llama3}
                echo "OLLAMA_ENDPOINT=$ollama_endpoint" >> .env
                echo "OLLAMA_MODEL=$ollama_model" >> .env
            else
                echo "OLLAMA_ENDPOINT=" >> .env
                echo "OLLAMA_MODEL=" >> .env
            fi

            echo "" >> .env
            echo "# Note: To change AI configuration later, edit the .env file." >> .env
            echo "AI configuration complete. .env created."
        else
            echo "AI features will be disabled. Creating empty .env file."
            echo "# Generated by start-local.sh - AI disabled" > .env
            echo "# To enable AI later, edit this .env and add API keys and models." >> .env
        fi
    fi
else
    echo ".env exists — skipping AI configuration step. If you want to change AI settings, edit the .env file." 
fi

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo "Error: Node.js not found"
    echo "Please install Node.js: https://nodejs.org"
    exit 1
fi

echo "Node.js installed: $(node --version)"

# Check if npm is installed
if ! command -v npm &> /dev/null; then
    echo "Error: npm not found"
    echo "Please install npm"
    exit 1
fi

echo "npm installed: $(npm --version)"

# Check if dependencies are installed
if [ ! -d "node_modules" ]; then
    echo "Installing dependencies..."
    npm install
    if [ $? -ne 0 ]; then
        echo "Failed to install dependencies"
        exit 1
    fi
    echo "Dependencies installed successfully"
fi

# Check if project is built
if [ ! -d ".next" ]; then
    echo "Building application..."
    npm run build
    if [ $? -ne 0 ]; then
        echo "Build failed"
        exit 1
    fi
    echo "Build completed successfully"
fi

echo ""
echo "Starting application..."
echo "URL: http://localhost:3000"
echo ""
echo "Usage Instructions:"
echo "   - Open http://localhost:3000 in your browser"
echo "   - Fully local execution, no external network required"
echo "   - Press Ctrl+C to stop the server"
echo "   - To add problems: Edit public/problems.json (see MODIFY-PROBLEMS-GUIDE.md)"
echo "   - To change AI settings: Edit the .env file"
echo "   - Changes take effect immediately without rebuilding!"
echo ""

# Start the application
npm start