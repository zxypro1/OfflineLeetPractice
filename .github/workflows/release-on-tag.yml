name: Release on tag

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read
  id-token: write

concurrency:
  group: "release-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  release:
    name: Generate changelog, build and create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Configure git for commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine tag
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Generate CHANGELOG.md
        id: gen_changelog
        run: |
          set -euo pipefail
          TAG=${{ steps.tag.outputs.tag }}

          PREV_TAG=$(git tag --sort=-creatordate | grep -v "^${TAG}$" | head -n1 || true)
          if [ -n "$PREV_TAG" ]; then
            RANGE="$PREV_TAG..$TAG"
          else
            RANGE="$TAG"
          fi

          HEADER="# Changelog\n\n"
          ENTRY="## $TAG - $(date -u +%Y-%m-%d)\n\n"
          COMMITS=$(git log --pretty=format:'- %s (%an)' $RANGE || true)
          if [ -z "$COMMITS" ]; then
            COMMITS="- (no commits found)"
          fi

          NEW_ENTRY="$ENTRY$COMMITS\n\n"

          if [ -f CHANGELOG.md ]; then
            printf "%s" "$HEADER" > /tmp/CHANGELOG.new
            printf "%s" "$NEW_ENTRY" >> /tmp/CHANGELOG.new
            cat CHANGELOG.md >> /tmp/CHANGELOG.new
            mv /tmp/CHANGELOG.new CHANGELOG.md
          else
            printf "%s" "$HEADER" > CHANGELOG.md
            printf "%s" "$NEW_ENTRY" >> CHANGELOG.md
          fi

          git add CHANGELOG.md
          if git diff --staged --quiet; then
            echo "no-changelog-changes"
          else
            git commit -m "chore(release): add changelog for $TAG"
            git push origin HEAD:main
            echo "changelog-committed"
          fi

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager" >&2
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build

      - name: Prepare release zip
        run: |
          set -euo pipefail
          TAG=${{ steps.tag.outputs.tag }}
          ZIP_NAME="release-${TAG}.zip"
          # include build output and public assets
          zip -r "$ZIP_NAME" .next public package.json package-lock.json || true
          ls -lah "$ZIP_NAME"

      - name: Read CHANGELOG.md
        id: changelog
        run: |
          # expose contents as step output
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: ${{ steps.tag.outputs.tag }}
          body: ${{ steps.changelog.outputs.body }}
          draft: false
          prerelease: false

      - name: Upload release asset (zip)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-${{ steps.tag.outputs.tag }}.zip
          asset_name: release-${{ steps.tag.outputs.tag }}.zip
          asset_content_type: application/zip
